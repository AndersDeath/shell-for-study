export const tsQuestions2 =[`## 11. Что требуется для набора текста на countWheels ниже?

\`\`\`typescript
interface Vehicle {
  countWheels(this: Vehicle): () => number;
}
\`\`\`
Он требует, чтобы countWheels был вызван объектом типа Vehicle.`,`## 12. Верно или неверно? Ниже действительно.

\`\`\`typescript
interface Window {
  name: string;
}
interface Window {
  app: string;
}
\`\`\`
Правда. У окна теперь есть и имя, и приложение.`,`## 13. Как вы ограничиваете значения, которым может быть присвоена строка?

**Ответ:** Просто определите точные строковые значения, которые объект или переменная может присвоить ей.
**Пример:**
\`\`\`typescript
let stringOptions: 'optOne' | 'optTwo';
\`\`\``,`## 14.  В чем преимущество использования дженериков перед «любыми»?
**Ответ:** Дженерики сохраняют информацию. Например, если строка передается как универсальный параметр, а функция возвращает универсальный параметр, то любая вызывающая функция знает, что она получит строку как тип возвращаемого значения.

Другая причина заключается в том, что функция может требовать, чтобы переданный универсальный шаблон был расширением интерфейса. Это позволяет гарантировать, что переданный универсальный шаблон должен иметь определенные функции.`,`## 15. Как называется функция TypeScript, которая позволяет значению быть (например) числом или строкой?

**Ответ:** Типы союзов.`,`## 16. Верно или неверно cледующий код компилируется?

\`\`\`typescript
interface Dog{
  hair: boolean;
  bloodType: 'warm';
}
interface Snake{
  scales: boolean;
  bloodType: 'cold';
}
const myCreature = (creature: Dog | Snake) => {
  console.log(creature.scales);
}
\`\`\`
Ложь. При использовании типов объединения доступны только члены, общие для обоих полей.`,`## 17.  Как создать массив, в котором удалены все методы изменения?

**Ответ:** Используйте тип ReadonlyArray.

\`\`\`typescript
let readOnly: ReadonlyArray<string> = ['a','b','c'];
readOnly.push('d');
\`\`\``,`## 18.  Как называется метод, в котором вы используете одно поле литеральных типов, чтобы позволить TypeScript сузить возможный текущий тип?

**Ответ:**
Дискриминационные союзы`,`## 19. Каков предполагаемый тип возвращаемого значения следующей функции?

\`\`\`typescript
function iFailed() {
  return error("I failed");
}
\`\`\`
**Ответ:** Тип never.`,`## 20.  Если - strictNullChecks выключен, почему null и undefined могут быть присвоены переменной let типа string или number?
**Ответ:** null и undefined - это подтипы всех других типов.`,`## 21. Верно или неверно. Две следующие функции имеют одинаковый тип?

\`\`\`typescript
function cityState(city: string, state = "Smith") {...}
function cityState(city: string, state? = "Smith") {...}
\`\`\`
**Ответ:** Правда. Параметры по умолчанию необязательны.`,`## 22. Оцените код ниже. Правда или ложь. Значением «name» в «person» может быть любое строковое значение.

\`\`\`typescript
interface A {
    name: string;
    age: number;
}
interface B {
    name: 'Jon' | 'Jim';
    address: string;
}
// const person : B & A
\`\`\`
Ложь. Должно быть, это Джон или Джим. Порядок пересечения типов не имеет значения.`,`## 23. Создайте имя интерфейса APIData, которое имеет неизвестное количество ключей и ограничивает значения типами «строка» или «число»?

\`\`\`typescript
interface APIData {
  [key: string]: string | number
}
\`\`\``,`## 24. Почему вы можете ограничить тип свойства значением true?
**Ответ:** Вы можете использовать его для ограничения значений объектов, типы свойств которых взаимосвязаны, т.е.

\`\`\`typescript
interface CallSuccess {
  success: true;
  error: null;
};
interface CallFailure {
  success: false;
  error: string;
};
\`\`\``,`## 25. Что такое кортеж?
**Ответ:** Кортеж - это массив с фиксированным числом элементов, типы которых известны и могут быть или не совпадать.`,`## 26. Как можно расширить типы?
**Ответ:** Они не могут проходить напрямую, но могут проходить через пересечение, то есть:

\`\`\`typescript
type MotorVehicle = {
  wheels: number;
}
type Car = MotorVehicle & {
  make: string;
}
const car: Car = {
  wheels: 4,
  make: 'Toyota'
}
\`\`\``,`## 27. Приведите пример, как проверить тип объекта?
\`\`\`typescript
interface Motorcycle {
  wheels: string;
}
interface Car {
  windshieldWiperBrand: string;
}
function isCar(vehicle: Car | Motorcycle): vehicle is Car{
  return (vehicle as Car).windshieldWiperBrand !== undefined;
}
\`\`\``,`## 28. В чем разница между string [] и [string]?

**Ответ:**
string [] - это массив, он может содержать только строки и имеет неопределенную длину.

[строка] - это кортеж. В этом случае он может содержать только одну строку, но (например) [строка, число] позволит ему содержать строку и число. Тип и длина фиксированы.`,`## 29. Что такое утверждение типа и как выглядит синтаксис?
**Ответ:** Утверждение типа - это когда вы сообщаете компилятору, что объект или переменная имеет определенный тип. Синтаксис может быть одним из следующих.

\`\`\`typescript
let char0: string = (someValue as string).charAt(0);
let char0: string = (<string>someValue).charAt(0);
\`\`\``,`## 30.  Что делает assertNever?
**Ответ:** Он проверяет объект и возвращает истину, если тип не задан.`,`## 31. Как можно ввести массив объектов с неизвестным количеством ключей и значений типа number?

\`\`\`typescript
obj: { [key: string]: number }[];
\`\`\``,`## 32.  Верно или неверно. Допустимо, чтобы для одной и той же функции были объявлены два подряд идущих типа, как в следующем примере?

\`\`\`typescript
function summingFunction(x: number, y: number): number;
function summingFunction(x: number, y: number, z: string): {value: number; name: string};
\`\`\`
Ответ верный. Это называется перегрузкой. Перегрузка - распространенный паттерн в JavaScript; иногда разработчик передает другой набор параметров той же функции и ожидает другого возвращаемого значения.`,`## 33. Как создать класс, получающий параметр generic type?

\`\`\`typescript
class MyClass<T> {...}
\`\`\``,`## 34. Поддерживает ли TypeScript числовые литеральные типы?

**Ответ:** Да. Ниже приведен пример использования.

\`\`\`typescript
interface Student {
  grade: 1 | 2 | 3 | 4;
  name: string;
}
\`\`\``,`## 35. Какова сигнатура метода console.log, когда включен TypeScript?
\`\`\`typescript
Console.log(...data: any[]): void
\`\`\``,`## 36.  Каково значение Compass.South в приведенном ниже коде?
\`\`\`typescript
enum Compass {
  North,
  East,
  South,
  West
}
\`\`\`
Compass.South равно 2. По умолчанию перечисления начинаются с 0 и автоматически увеличиваются на 1.`,`## 37. Верно или неверно. Следующее не компилируется?

\`\`\`typescript
enum Compass {
  North = 0,
  East = '1',
  South = 2,
  West = '3'
}
\`\`\`
Ответ неверный, он компилируется. Перечисления могут представлять собой сочетание строковых и числовых значений.`,`## 38. Верно или неверно. super () должен быть вызван до обращения к свойству this в теле конструктора, если класс расширяет другой класс?
**Ответ:** Правда.`,`## 39. Предположим, что автомобиль расширяет MotorVehicle. Правда или ложь. Следующий код компилируется?

\`\`\`typescript
let prius: MotorVehicle = new Car();
\`\`\`
Правда. Поскольку MotorVehicle является родительским классом Car, prius может быть инициализирован как Car, и все же верно, что он имеет тип MotorVehicle.`,`## 40 Верно или нет. Модификатор protected нельзя использовать в конструкторе базового класса?

**Ответ:** Ложь. Модификатор protected может использоваться в конструкторах и предотвращает создание экземпляра класса другими не дочерними классами.`]
